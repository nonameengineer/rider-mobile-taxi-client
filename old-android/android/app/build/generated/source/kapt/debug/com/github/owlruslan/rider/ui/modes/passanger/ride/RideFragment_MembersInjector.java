// Generated by Dagger (https://dagger.dev).
package com.github.owlruslan.rider.ui.modes.passanger.ride;

import com.github.owlruslan.rider.services.map.mapbox.MapboxService;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompleteFragment;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchFragment;
import dagger.Lazy;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RideFragment_MembersInjector implements MembersInjector<RideFragment> {
  private final Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider;

  private final Provider<RideContract.Presenter> presenterProvider;

  private final Provider<MapboxService> mapboxServiceProvider;

  private final Provider<SearchFragment> p0Provider;

  private final Provider<CompleteFragment> p0Provider2;

  public RideFragment_MembersInjector(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RideContract.Presenter> presenterProvider,
      Provider<MapboxService> mapboxServiceProvider, Provider<SearchFragment> p0Provider,
      Provider<CompleteFragment> p0Provider2) {
    this.androidInjectorProvider = androidInjectorProvider;
    this.presenterProvider = presenterProvider;
    this.mapboxServiceProvider = mapboxServiceProvider;
    this.p0Provider = p0Provider;
    this.p0Provider2 = p0Provider2;
  }

  public static MembersInjector<RideFragment> create(
      Provider<DispatchingAndroidInjector<Object>> androidInjectorProvider,
      Provider<RideContract.Presenter> presenterProvider,
      Provider<MapboxService> mapboxServiceProvider, Provider<SearchFragment> p0Provider,
      Provider<CompleteFragment> p0Provider2) {
    return new RideFragment_MembersInjector(androidInjectorProvider, presenterProvider, mapboxServiceProvider, p0Provider, p0Provider2);
  }

  @Override
  public void injectMembers(RideFragment instance) {
    DaggerFragment_MembersInjector.injectAndroidInjector(instance, androidInjectorProvider.get());
    injectPresenter(instance, presenterProvider.get());
    injectMapboxService(instance, mapboxServiceProvider.get());
    injectSetSearchFragmentProvider(instance, DoubleCheck.lazy(p0Provider));
    injectSetCompleteFragmentProvider(instance, DoubleCheck.lazy(p0Provider2));
  }

  @InjectedFieldSignature("com.github.owlruslan.rider.ui.modes.passanger.ride.RideFragment.presenter")
  public static void injectPresenter(RideFragment instance, RideContract.Presenter presenter) {
    instance.presenter = presenter;
  }

  @InjectedFieldSignature("com.github.owlruslan.rider.ui.modes.passanger.ride.RideFragment.mapboxService")
  public static void injectMapboxService(RideFragment instance, MapboxService mapboxService) {
    instance.mapboxService = mapboxService;
  }

  public static void injectSetSearchFragmentProvider(RideFragment instance,
      Lazy<SearchFragment> p0) {
    instance.setSearchFragmentProvider(p0);
  }

  public static void injectSetCompleteFragmentProvider(RideFragment instance,
      Lazy<CompleteFragment> p0) {
    instance.setCompleteFragmentProvider(p0);
  }
}
