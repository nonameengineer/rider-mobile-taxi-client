// Generated by Dagger (https://dagger.dev).
package com.github.owlruslan.rider.di;

import android.app.Application;
import com.github.owlruslan.rider.RiderApplication;
import com.github.owlruslan.rider.services.map.mapbox.MapboxService;
import com.github.owlruslan.rider.services.map.mapbox.MapboxService_Factory;
import com.github.owlruslan.rider.services.places.PlacesService;
import com.github.owlruslan.rider.services.places.PlacesService_Factory;
import com.github.owlruslan.rider.ui.MainActivity;
import com.github.owlruslan.rider.ui.MainActivity_MembersInjector;
import com.github.owlruslan.rider.ui.modes.driver.complete.CompleteDriverFragment;
import com.github.owlruslan.rider.ui.modes.driver.complete.CompleteDriverFragment_Factory;
import com.github.owlruslan.rider.ui.modes.driver.complete.CompleteDriverFragment_MembersInjector;
import com.github.owlruslan.rider.ui.modes.driver.complete.CompleteDriverModule_CompleteFragment;
import com.github.owlruslan.rider.ui.modes.driver.complete.CompleteDriverPresenter;
import com.github.owlruslan.rider.ui.modes.driver.complete.CompleteDriverPresenter_Factory;
import com.github.owlruslan.rider.ui.modes.driver.ride.RideDriverFragment;
import com.github.owlruslan.rider.ui.modes.driver.ride.RideDriverFragment_Factory;
import com.github.owlruslan.rider.ui.modes.driver.ride.RideDriverFragment_MembersInjector;
import com.github.owlruslan.rider.ui.modes.driver.ride.RideDriverModule_RideFragment;
import com.github.owlruslan.rider.ui.modes.driver.ride.RideDriverPresenter;
import com.github.owlruslan.rider.ui.modes.driver.ride.RideDriverPresenter_Factory;
import com.github.owlruslan.rider.ui.modes.driver.search.SearchDriverFragment;
import com.github.owlruslan.rider.ui.modes.driver.search.SearchDriverFragment_Factory;
import com.github.owlruslan.rider.ui.modes.driver.search.SearchDriverFragment_MembersInjector;
import com.github.owlruslan.rider.ui.modes.driver.search.SearchDriverModule_SearchFragment;
import com.github.owlruslan.rider.ui.modes.driver.search.SearchDriverPresenter;
import com.github.owlruslan.rider.ui.modes.driver.search.SearchDriverPresenter_Factory;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompleteContract;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompleteFragment;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompleteFragment_Factory;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompleteFragment_MembersInjector;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompleteModule_CompleteFragment;
import com.github.owlruslan.rider.ui.modes.passanger.complete.CompletePresenter_Factory;
import com.github.owlruslan.rider.ui.modes.passanger.ride.RideContract;
import com.github.owlruslan.rider.ui.modes.passanger.ride.RideFragment;
import com.github.owlruslan.rider.ui.modes.passanger.ride.RideFragment_Factory;
import com.github.owlruslan.rider.ui.modes.passanger.ride.RideFragment_MembersInjector;
import com.github.owlruslan.rider.ui.modes.passanger.ride.RideModule_RideFragment;
import com.github.owlruslan.rider.ui.modes.passanger.ride.RidePresenter_Factory;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchFragment;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchFragment_Factory;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchFragment_MembersInjector;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchModule_MapFragment;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchPresenter;
import com.github.owlruslan.rider.ui.modes.passanger.search.SearchPresenter_Factory;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private DaggerAppComponent(Application applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
  }

  @Override
  public void inject(RiderApplication arg0) {
    injectRiderApplication(arg0);
  }

  @CanIgnoreReturnValue
  private RiderApplication injectRiderApplication(RiderApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBindingModule_MainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_MainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBindingModule_MainActivity.MainActivitySubcomponent {
    private Provider<SearchModule_MapFragment.SearchFragmentSubcomponent.Factory> searchFragmentSubcomponentFactoryProvider;

    private Provider<RideModule_RideFragment.RideFragmentSubcomponent.Factory> rideFragmentSubcomponentFactoryProvider;

    private Provider<CompleteModule_CompleteFragment.CompleteFragmentSubcomponent.Factory> completeFragmentSubcomponentFactoryProvider;

    private Provider<SearchDriverModule_SearchFragment.SearchDriverFragmentSubcomponent.Factory> searchDriverFragmentSubcomponentFactoryProvider;

    private Provider<RideDriverModule_RideFragment.RideDriverFragmentSubcomponent.Factory> rideDriverFragmentSubcomponentFactoryProvider;

    private Provider<CompleteDriverModule_CompleteFragment.CompleteDriverFragmentSubcomponent.Factory> completeDriverFragmentSubcomponentFactoryProvider;

    private Provider<Map<Class<?>, Provider<AndroidInjector.Factory<?>>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider;

    private Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

    private Provider<SearchPresenter> searchPresenterProvider;

    private Provider<PlacesService> placesServiceProvider;

    private Provider<RideContract.Presenter> ridePresenterProvider;

    private Provider<MapboxService> mapboxServiceProvider;

    private Provider<SearchFragment> searchFragmentProvider;

    private Provider<CompleteContract.Presenter> completePresenterProvider;

    private Provider<CompleteFragment> completeFragmentProvider;

    private Provider<RideFragment> rideFragmentProvider;

    private Provider<SearchDriverPresenter> searchDriverPresenterProvider;

    private Provider<SearchDriverFragment> searchDriverFragmentProvider;

    private Provider<RideDriverPresenter> rideDriverPresenterProvider;

    private Provider<RideDriverFragment> rideDriverFragmentProvider;

    private Provider<CompleteDriverPresenter> completeDriverPresenterProvider;

    private Provider<CompleteDriverFragment> completeDriverFragmentProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>builderWithExpectedSize(7).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SearchFragment.class, (Provider) searchFragmentSubcomponentFactoryProvider).put(RideFragment.class, (Provider) rideFragmentSubcomponentFactoryProvider).put(CompleteFragment.class, (Provider) completeFragmentSubcomponentFactoryProvider).put(SearchDriverFragment.class, (Provider) searchDriverFragmentSubcomponentFactoryProvider).put(RideDriverFragment.class, (Provider) rideDriverFragmentSubcomponentFactoryProvider).put(CompleteDriverFragment.class, (Provider) completeDriverFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.searchFragmentSubcomponentFactoryProvider = new Provider<SearchModule_MapFragment.SearchFragmentSubcomponent.Factory>() {
        @Override
        public SearchModule_MapFragment.SearchFragmentSubcomponent.Factory get() {
          return new SearchFragmentSubcomponentFactory();
        }
      };
      this.rideFragmentSubcomponentFactoryProvider = new Provider<RideModule_RideFragment.RideFragmentSubcomponent.Factory>() {
        @Override
        public RideModule_RideFragment.RideFragmentSubcomponent.Factory get() {
          return new RideFragmentSubcomponentFactory();
        }
      };
      this.completeFragmentSubcomponentFactoryProvider = new Provider<CompleteModule_CompleteFragment.CompleteFragmentSubcomponent.Factory>() {
        @Override
        public CompleteModule_CompleteFragment.CompleteFragmentSubcomponent.Factory get() {
          return new CompleteFragmentSubcomponentFactory();
        }
      };
      this.searchDriverFragmentSubcomponentFactoryProvider = new Provider<SearchDriverModule_SearchFragment.SearchDriverFragmentSubcomponent.Factory>() {
        @Override
        public SearchDriverModule_SearchFragment.SearchDriverFragmentSubcomponent.Factory get() {
          return new SearchDriverFragmentSubcomponentFactory();
        }
      };
      this.rideDriverFragmentSubcomponentFactoryProvider = new Provider<RideDriverModule_RideFragment.RideDriverFragmentSubcomponent.Factory>() {
        @Override
        public RideDriverModule_RideFragment.RideDriverFragmentSubcomponent.Factory get() {
          return new RideDriverFragmentSubcomponentFactory();
        }
      };
      this.completeDriverFragmentSubcomponentFactoryProvider = new Provider<CompleteDriverModule_CompleteFragment.CompleteDriverFragmentSubcomponent.Factory>() {
        @Override
        public CompleteDriverModule_CompleteFragment.CompleteDriverFragmentSubcomponent.Factory get(
            ) {
          return new CompleteDriverFragmentSubcomponentFactory();
        }
      };
      this.mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider = MapProviderFactory.<Class<?>, AndroidInjector.Factory<?>>builder(7).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(SearchFragment.class, (Provider) searchFragmentSubcomponentFactoryProvider).put(RideFragment.class, (Provider) rideFragmentSubcomponentFactoryProvider).put(CompleteFragment.class, (Provider) completeFragmentSubcomponentFactoryProvider).put(SearchDriverFragment.class, (Provider) searchDriverFragmentSubcomponentFactoryProvider).put(RideDriverFragment.class, (Provider) rideDriverFragmentSubcomponentFactoryProvider).put(CompleteDriverFragment.class, (Provider) completeDriverFragmentSubcomponentFactoryProvider).build();
      this.dispatchingAndroidInjectorProvider = DispatchingAndroidInjector_Factory.create(mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider, MapFactory.<String, Provider<AndroidInjector.Factory<?>>>emptyMapProvider());
      this.searchPresenterProvider = DoubleCheck.provider(SearchPresenter_Factory.create());
      this.placesServiceProvider = DoubleCheck.provider(PlacesService_Factory.create((Provider) DaggerAppComponent.this.applicationProvider));
      this.ridePresenterProvider = DoubleCheck.provider((Provider) RidePresenter_Factory.create());
      this.mapboxServiceProvider = DoubleCheck.provider(MapboxService_Factory.create((Provider) DaggerAppComponent.this.applicationProvider));
      this.searchFragmentProvider = new DelegateFactory<>();
      this.completePresenterProvider = DoubleCheck.provider((Provider) CompletePresenter_Factory.create());
      this.completeFragmentProvider = DoubleCheck.provider(CompleteFragment_Factory.create(dispatchingAndroidInjectorProvider, completePresenterProvider));
      this.rideFragmentProvider = DoubleCheck.provider(RideFragment_Factory.create(dispatchingAndroidInjectorProvider, ridePresenterProvider, mapboxServiceProvider, searchFragmentProvider, completeFragmentProvider));
      DelegateFactory.setDelegate(searchFragmentProvider, DoubleCheck.provider(SearchFragment_Factory.create(dispatchingAndroidInjectorProvider, (Provider) searchPresenterProvider, placesServiceProvider, rideFragmentProvider)));
      this.searchDriverPresenterProvider = DoubleCheck.provider(SearchDriverPresenter_Factory.create());
      this.searchDriverFragmentProvider = DoubleCheck.provider(SearchDriverFragment_Factory.create(dispatchingAndroidInjectorProvider, (Provider) searchDriverPresenterProvider));
      this.rideDriverPresenterProvider = DoubleCheck.provider(RideDriverPresenter_Factory.create());
      this.rideDriverFragmentProvider = DoubleCheck.provider(RideDriverFragment_Factory.create(dispatchingAndroidInjectorProvider, (Provider) rideDriverPresenterProvider));
      this.completeDriverPresenterProvider = DoubleCheck.provider(CompleteDriverPresenter_Factory.create());
      this.completeDriverFragmentProvider = DoubleCheck.provider(CompleteDriverFragment_Factory.create(dispatchingAndroidInjectorProvider, (Provider) completeDriverPresenterProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectSetSearchFragmentProvider(instance, DoubleCheck.lazy(searchFragmentProvider));
      MainActivity_MembersInjector.injectSetRideFragmentProvider(instance, DoubleCheck.lazy(rideFragmentProvider));
      MainActivity_MembersInjector.injectSetCompleteFragmentProvider(instance, DoubleCheck.lazy(completeFragmentProvider));
      MainActivity_MembersInjector.injectSetSearchDriverDriverFragmentProvider(instance, DoubleCheck.lazy(searchDriverFragmentProvider));
      MainActivity_MembersInjector.injectSetRideDriverDriverFragmentProvider(instance, DoubleCheck.lazy(rideDriverFragmentProvider));
      MainActivity_MembersInjector.injectSetCompleteDriverDriverFragmentProvider(instance, DoubleCheck.lazy(completeDriverFragmentProvider));
      return instance;
    }

    private final class SearchFragmentSubcomponentFactory implements SearchModule_MapFragment.SearchFragmentSubcomponent.Factory {
      @Override
      public SearchModule_MapFragment.SearchFragmentSubcomponent create(SearchFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchFragmentSubcomponentImpl implements SearchModule_MapFragment.SearchFragmentSubcomponent {
      private SearchFragmentSubcomponentImpl(SearchFragment arg0) {

      }

      @Override
      public void inject(SearchFragment arg0) {
        injectSearchFragment(arg0);
      }

      @CanIgnoreReturnValue
      private SearchFragment injectSearchFragment(SearchFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SearchFragment_MembersInjector.injectPresenter(instance, MainActivitySubcomponentImpl.this.searchPresenterProvider.get());
        SearchFragment_MembersInjector.injectPlacesService(instance, MainActivitySubcomponentImpl.this.placesServiceProvider.get());
        SearchFragment_MembersInjector.injectSetRideFragmentProvider(instance, DoubleCheck.lazy(MainActivitySubcomponentImpl.this.rideFragmentProvider));
        return instance;
      }
    }

    private final class RideFragmentSubcomponentFactory implements RideModule_RideFragment.RideFragmentSubcomponent.Factory {
      @Override
      public RideModule_RideFragment.RideFragmentSubcomponent create(RideFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RideFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RideFragmentSubcomponentImpl implements RideModule_RideFragment.RideFragmentSubcomponent {
      private RideFragmentSubcomponentImpl(RideFragment arg0) {

      }

      @Override
      public void inject(RideFragment arg0) {
        injectRideFragment(arg0);
      }

      @CanIgnoreReturnValue
      private RideFragment injectRideFragment(RideFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        RideFragment_MembersInjector.injectPresenter(instance, MainActivitySubcomponentImpl.this.ridePresenterProvider.get());
        RideFragment_MembersInjector.injectMapboxService(instance, MainActivitySubcomponentImpl.this.mapboxServiceProvider.get());
        RideFragment_MembersInjector.injectSetSearchFragmentProvider(instance, DoubleCheck.lazy(MainActivitySubcomponentImpl.this.searchFragmentProvider));
        RideFragment_MembersInjector.injectSetCompleteFragmentProvider(instance, DoubleCheck.lazy(MainActivitySubcomponentImpl.this.completeFragmentProvider));
        return instance;
      }
    }

    private final class CompleteFragmentSubcomponentFactory implements CompleteModule_CompleteFragment.CompleteFragmentSubcomponent.Factory {
      @Override
      public CompleteModule_CompleteFragment.CompleteFragmentSubcomponent create(
          CompleteFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CompleteFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CompleteFragmentSubcomponentImpl implements CompleteModule_CompleteFragment.CompleteFragmentSubcomponent {
      private CompleteFragmentSubcomponentImpl(CompleteFragment arg0) {

      }

      @Override
      public void inject(CompleteFragment arg0) {
        injectCompleteFragment(arg0);
      }

      @CanIgnoreReturnValue
      private CompleteFragment injectCompleteFragment(CompleteFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        CompleteFragment_MembersInjector.injectPresenter(instance, MainActivitySubcomponentImpl.this.completePresenterProvider.get());
        return instance;
      }
    }

    private final class SearchDriverFragmentSubcomponentFactory implements SearchDriverModule_SearchFragment.SearchDriverFragmentSubcomponent.Factory {
      @Override
      public SearchDriverModule_SearchFragment.SearchDriverFragmentSubcomponent create(
          SearchDriverFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SearchDriverFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SearchDriverFragmentSubcomponentImpl implements SearchDriverModule_SearchFragment.SearchDriverFragmentSubcomponent {
      private SearchDriverFragmentSubcomponentImpl(SearchDriverFragment arg0) {

      }

      @Override
      public void inject(SearchDriverFragment arg0) {
        injectSearchDriverFragment(arg0);
      }

      @CanIgnoreReturnValue
      private SearchDriverFragment injectSearchDriverFragment(SearchDriverFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SearchDriverFragment_MembersInjector.injectPresenter(instance, MainActivitySubcomponentImpl.this.searchDriverPresenterProvider.get());
        return instance;
      }
    }

    private final class RideDriverFragmentSubcomponentFactory implements RideDriverModule_RideFragment.RideDriverFragmentSubcomponent.Factory {
      @Override
      public RideDriverModule_RideFragment.RideDriverFragmentSubcomponent create(
          RideDriverFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RideDriverFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RideDriverFragmentSubcomponentImpl implements RideDriverModule_RideFragment.RideDriverFragmentSubcomponent {
      private RideDriverFragmentSubcomponentImpl(RideDriverFragment arg0) {

      }

      @Override
      public void inject(RideDriverFragment arg0) {
        injectRideDriverFragment(arg0);
      }

      @CanIgnoreReturnValue
      private RideDriverFragment injectRideDriverFragment(RideDriverFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        RideDriverFragment_MembersInjector.injectPresenter(instance, MainActivitySubcomponentImpl.this.rideDriverPresenterProvider.get());
        return instance;
      }
    }

    private final class CompleteDriverFragmentSubcomponentFactory implements CompleteDriverModule_CompleteFragment.CompleteDriverFragmentSubcomponent.Factory {
      @Override
      public CompleteDriverModule_CompleteFragment.CompleteDriverFragmentSubcomponent create(
          CompleteDriverFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CompleteDriverFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CompleteDriverFragmentSubcomponentImpl implements CompleteDriverModule_CompleteFragment.CompleteDriverFragmentSubcomponent {
      private CompleteDriverFragmentSubcomponentImpl(CompleteDriverFragment arg0) {

      }

      @Override
      public void inject(CompleteDriverFragment arg0) {
        injectCompleteDriverFragment(arg0);
      }

      @CanIgnoreReturnValue
      private CompleteDriverFragment injectCompleteDriverFragment(CompleteDriverFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        CompleteDriverFragment_MembersInjector.injectPresenter(instance, MainActivitySubcomponentImpl.this.completeDriverPresenterProvider.get());
        return instance;
      }
    }
  }
}
